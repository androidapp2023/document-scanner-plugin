{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAqCA,MAAM,CAAN,IAAY,YAUX;AAVD,WAAY,YAAY;IACtB;;OAEG;IACH,iCAAiB,CAAA;IAEjB;;OAEG;IACH,+CAA+B,CAAA;AACjC,CAAC,EAVW,YAAY,KAAZ,YAAY,QAUvB;AAgBD,MAAM,CAAN,IAAY,0BAYX;AAZD,WAAY,0BAA0B;IACpC;;;OAGG;IACH,iDAAmB,CAAA;IAEnB;;;OAGG;IACH,+CAAiB,CAAA;AACnB,CAAC,EAZW,0BAA0B,KAA1B,0BAA0B,QAYrC","sourcesContent":["export interface DocumentScannerPlugin {\r\n  /**\r\n   * Opens the camera, and starts the document scan\r\n   */\r\n  scanDocument(options?: ScanDocumentOptions): Promise<ScanDocumentResponse>\r\n}\r\n\r\nexport interface ScanDocumentOptions {\r\n  /**\r\n   * Android only: The quality of the cropped image from 0 - 100. 100 is the best quality.\r\n   * @default: 100\r\n   */\r\n  croppedImageQuality?: number\r\n\r\n  /**\r\n   * Android only: If true then once the user takes a photo, they get to preview the automatically\r\n   * detected document corners. They can then move the corners in case there needs to\r\n   * be an adjustment. If false then the user can't adjust the corners, and the user\r\n   * can only take 1 photo (maxNumDocuments can't be more than 1 in this case).\r\n   * @default: true\r\n   */\r\n  letUserAdjustCrop?: boolean\r\n\r\n  /**\r\n   * Android only: The maximum number of photos an user can take (not counting photo retakes)\r\n   * @default: 24\r\n   */\r\n  maxNumDocuments?: number\r\n\r\n  /**\r\n   * The response comes back in this format on success. It can be the document\r\n   * scan image file paths or base64 images.\r\n   * @default: ResponseType.ImageFilePath\r\n   */\r\n  responseType?: ResponseType\r\n}\r\n\r\nexport enum ResponseType {\r\n  /**\r\n   * Use this response type if you want document scan returned as base64 images.\r\n   */\r\n  Base64 = 'base64',\r\n\r\n  /**\r\n   * Use this response type if you want document scan returned as inmage file paths.\r\n   */\r\n  ImageFilePath = 'imageFilePath'\r\n}\r\n\r\nexport interface ScanDocumentResponse {\r\n  /**\r\n   * This is an array with either file paths or base64 images for the\r\n   * document scan.\r\n   */\r\n  scannedImages?: string[]\r\n\r\n  /**\r\n   * The status lets you know if the document scan completes successfully,\r\n   * or if the user cancels before completing the document scan.\r\n   */\r\n  status?: ScanDocumentResponseStatus\r\n}\r\n\r\nexport enum ScanDocumentResponseStatus {\r\n  /**\r\n   * The status comes back as success if the document scan completes\r\n   * successfully.\r\n   */\r\n  Success = 'success',\r\n\r\n  /**\r\n   * The status comes back as cancel if the user closes out of the camera\r\n   * before completing the document scan.\r\n   */\r\n  Cancel = 'cancel'\r\n}"]}